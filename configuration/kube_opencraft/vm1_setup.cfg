# Deploy 1 VM with all components for the experiment
# For dev/testing purposes only

[infrastructure]
# AWS cloud provider for VMs
provider = aws

# Specification of the VM that will be rented
cloud_nodes = 1
cloud_cores = 4
cloud_memory = 16
cloud_quota = 1.0

# Name of the AWS VM. Its specs should correspond with the options above (for accounting)
aws_cloud = "g4dn.xlarge"

# The AWS region to get the VM from
aws_region = "us-east-2"
aws_zone = "us-east-2a"

# AWS account details -- IAM access keys (can be found in ~/.aws/credentials)
# The access key is ~20 characters, the secret key ~40 characters
aws_access_keys = ""
aws_secret_access_keys = ""

# OS for the VM. This is Amazon Linux 2023 AMI
# For Ubuntu 22.04 on us-east-2:    ami-0986e6d2d2bc905ca
# For AWS Linux on us-east-2:       ami-09b90e09742640522
aws_ami = "ami-0986e6d2d2bc905ca"

# [NOTE] An SSH key is required: ~/.ssh/id_rsa_continuum.pem
# See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-key-pairs.html on how to generate
# Something similar to:
# 1. cd ~/.ssh
# 2. aws ec2 create-key-pair --key-name id_rsa_continuum --key-type rsa --key-format pem \
#       --query "KeyMaterial" --output text > id_rsa_continuum.pem
# 3. chmod 400 id_rsa_continuum.pem

[benchmark]
# Resource manager to deploy on the VM
resource_manager = kubernetes

# Force pull Docker containers in case an application container has been updated
docker_pull = True

# Deploy software for observability with the benchmark or resource manager
# Currently only supports deploying on top of Kubernetes
# Options: prometheus, telegraf. Default: None (if left empty/undefined)
observability = telegraf

# The application/use case to deploy on Kubernetes
application = opencraft

# Already run your application on the worker once beforehand (experimental)
# This guarantees the appliation is cached for the run you want to measure afterward
cache_worker = True

# The CPU and memory resources per container
# For Opencraft, there are 5 containers so these values x 5 should still fit on the VM
application_worker_cpu = 0.5
application_worker_memory = 2

# Whether to use a software pre-installation and post-installation step with applicaiton-specific
# setup, just before and after setting up the resource manager (but always after base_install)
# Currently Kubernetes-specific
app_pre_install = True
app_post_install = True

############################################################################################
# TODO add application-specific parameter below
############################################################################################
sleep_time = 15